{"version":3,"sources":["s1-main/m1-ui/u0-common/c1-SuperInputText/SuperInputText.module.scss","s1-main/m1-ui/u0-common/c3-SuperCheckbox/SuperCheckbox.module.scss","s1-main/m1-ui/u0-common/c2-SuperButton/SuperButton.module.scss","s1-main/m1-ui/u2-main/Main.module.scss","s2-features/f5-newPasswordEntry/npe2-bll/updatePasswordReducer.ts","s1-main/m1-ui/u0-common/c1-SuperInputText/SuperInputText.tsx","s1-main/m1-ui/u0-common/c2-SuperButton/SuperButton.tsx","s1-main/m1-ui/u0-common/c3-SuperCheckbox/SuperCheckbox.tsx","s2-features/f1-login/l1-ui/u1-login/Login.tsx","s1-main/m3-dal/instance.ts","s2-features/f1-login/l3-dal/loginAPI.ts","s2-features/f1-login/l2-bll/loginReducer.ts","s2-features/f1-login/l1-ui/u1-login/LoginContainer.tsx","s2-features/f1-login/l1-ui/LoginPage.tsx","s1-main/m1-ui/u3-routes/Page404.tsx","s2-features/f2-registration/r1-ui/u1-registration/Registration.tsx","s2-features/f2-registration/r3-dal/registrationAPI.ts","s2-features/f2-registration/r2-bll/registrationReducer.ts","s2-features/f2-registration/r1-ui/u1-registration/RegistrationContainer.tsx","s2-features/f2-registration/r1-ui/RegistrationPage.tsx","s1-main/m1-ui/u0-common/ComponentsTestRack.tsx","s2-features/f3-profile/p1-ui/u1-profile/Profile.tsx","s2-features/f3-profile/p1-ui/u1-profile/ProfileContainer.tsx","s2-features/f3-profile/p1-ui/ProfilePage.tsx","s2-features/f4-passwordRecovery/pr3-dal/passwordRecoveryAPI.ts","s2-features/f5-newPasswordEntry/npe3-dal/updatePassAPI.ts","s2-features/f4-passwordRecovery/pr2-bll/passwordRecoveryReducer.ts","s2-features/f4-passwordRecovery/pr1-ui/u1-passwordRecovery/PasswordRecovery.tsx","s2-features/f4-passwordRecovery/pr1-ui/u1-passwordRecovery/PasswordRecoveryContainer.tsx","s2-features/f4-passwordRecovery/pr1-ui/PasswordRecoveryPage.tsx","s2-features/f5-newPasswordEntry/npe1-ui/u1-passwordEntry/NewPasswordEntry.tsx","s2-features/f5-newPasswordEntry/npe1-ui/u1-passwordEntry/NewPasswordEntryContainer.tsx","s2-features/f5-newPasswordEntry/npe1-ui/NewPasswordEntryPage.tsx","s1-main/m1-ui/u3-routes/Routes.tsx","s1-main/m1-ui/u4-header/Header.tsx","s1-main/m1-ui/u2-main/Main.tsx","s1-main/m2-bll/store.ts","s2-features/f3-profile/p2-bll/profileReducer.ts","s1-main/m1-ui/u1-app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CONS","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","placeholder","className","spanClassName","restProps","finalInputClassName","s","formFieldError","formField","formGroup","id","e","currentTarget","value","key","SuperButton","red","finalClassName","btn","SuperCheckbox","onChangeChecked","children","checkbox","checked","check","Login","formik","onSubmit","handleSubmit","htmlFor","getFieldProps","errors","email","style","color","password","disabled","isValid","dirty","isSubmitting","to","PATH","REGISTRATION","PASSWORD_RECOVERY","instance","axios","create","baseURL","withCredentials","loginAPI","login","data","a","post","response","logout","delete","me","initialState","name","isLoggedIn","actions","errorHandler","dispatch","message","thunks","values","LoginContainer","useSelector","state","useDispatch","useFormik","initialValues","rememberMe","validate","test","PROFILE","LoginPage","Page404","Registration","serverErrors","confirmPassword","registrationAPI","setRegister","result","isSuccessRegister","RegistrationContainer","registration","useEffect","length","RegistrationPage","ComponentsTestRack","Profile","onClick","ProfileContainer","LOGIN","ProfilePage","passRecoveryAPI","from","token","updatePassAPI","resetToken","passIsUpdated","actionsUpdate","UPDATE_RESULT","status","UPDATED_PASS","updatePasswordTC","res","info","console","inputText","text","CHANGE_PASS","SEND_EMAIL","recoverThunks","PasswordRecovery","inputHandler","buttonClickHandler","PasswordRecoveryContainer","recoveryResult","passRecovery","PasswordRecoveryPage","NewPasswordEntry","resultData","isUpdate","NewPasswordEntryContainer","updatePass","useParams","NewPasswordEntryPage","NEW_PASSWORD_ENTRY","COMPONENT_TEST_RACK","Routes","path","exact","render","Header","Main","mainContainer","reducers","combineReducers","action","profile","SET_PASS","store","createStore","applyMiddleware","thunkMiddleware","window","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.baed33b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formField\":\"SuperInputText_formField__2Mpgl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__QGvED\",\"check\":\"SuperCheckbox_check__1yPi_\",\"spanClassName\":\"SuperCheckbox_spanClassName__Q-gso\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__23Mcy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Main_mainContainer__1Du-L\"};","import { InferActionsType } from '../../../s1-main/m2-bll/actions'\nimport { Reducer } from 'redux'\nimport { AppThunk } from '../../../s1-main/m3-dal/thunks'\nimport { updatePassAPI } from '../npe3-dal/updatePassAPI'\n\nexport type InitialStateRecoveryType = typeof initialState\n\nenum CONS {\n   UPDATE_RESULT = 'UPDATE_RESULT',\n   SET_PASS = 'SET_PASS',\n   UPDATED_PASS = 'UPDATED_PASS',\n}\n\ntype ActionTypes = InferActionsType<typeof actionsUpdate>\n\nconst initialState = {\n   result: 'Укажите новый пароль',\n   password: '',\n   passIsUpdated: false,\n}\n\nexport const updatePasswordReducer: Reducer<InitialStateRecoveryType, ActionTypes> = (\n   state = initialState,\n   action,\n): InitialStateRecoveryType => {\n   switch (action.type) {\n      case CONS.UPDATE_RESULT:\n         return { ...state, result: action.result }\n      case CONS.SET_PASS:\n         return { ...state, password: action.password }\n      case CONS.UPDATED_PASS:\n         return { ...state, passIsUpdated: action.status }\n      default:\n         return state\n   }\n}\n\nexport const actionsUpdate = {\n   passUpdateResultAC: (result: string) =>\n      ({\n         type: CONS.UPDATE_RESULT,\n         result,\n      } as const),\n   setPassAC: (password: string) =>\n      ({\n         type: CONS.SET_PASS,\n         password,\n      } as const),\n   passUpdatedAC: (status: boolean) =>\n      ({\n         type: CONS.UPDATED_PASS,\n         status,\n      } as const),\n}\n\nexport const updatePasswordTC = {\n   updatePass: (email: string, token: string): AppThunk => async (dispatch) => {\n      try {\n         const res = await updatePassAPI.updatePass(email, token)\n         dispatch(actionsUpdate.passUpdateResultAC(res.data.info))\n         dispatch(actionsUpdate.passUpdatedAC(true))\n      } catch (e) {\n         console.error(e)\n         dispatch(actionsUpdate.passUpdateResultAC(e.data.error))\n      }\n   },\n}\n","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from 'react'\nimport s from './SuperInputText.module.scss'\n\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperInputTextPropsType = DefaultInputPropsType & {\n   onChangeText?: (value: string) => void\n   onEnter?: () => void\n   error?: string\n   spanClassName?: string\n   placeholder?: string\n}\n\nexport const SuperInputText: React.FC<SuperInputTextPropsType> = ({\n   type,\n   onChange,\n   onChangeText,\n   onKeyPress,\n   onEnter,\n   error,\n   className,\n   spanClassName,\n   placeholder,\n   ...restProps\n}) => {\n   const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n      onChange && onChange(e)\n\n      onChangeText && onChangeText(e.currentTarget.value)\n   }\n   const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n      onKeyPress && onKeyPress(e)\n\n      e.key === 'Enter' && onEnter && onEnter()\n   }\n   const finalInputClassName = error ? `${s.formFieldError}` : `${s.formField}`\n\n   return (\n      <div className={s.formGroup}>\n         <input\n            id='lineInput'\n            placeholder={placeholder}\n            type={'text'}\n            onChange={onChangeCallback}\n            onKeyPress={onKeyPressCallback}\n            className={finalInputClassName}\n            {...restProps}\n         />\n      </div>\n   )\n}\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from 'react'\nimport s from './SuperButton.module.scss'\n\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n   red?: boolean\n}\n\nexport const SuperButton: React.FC<SuperButtonPropsType> = ({ red, className, ...restProps }) => {\n   const finalClassName = `${className} ${red ? s.red : s.btn}`\n\n   return <button className={finalClassName} {...restProps} />\n}\n","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from 'react'\nimport s from './SuperCheckbox.module.scss'\n\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n   onChangeChecked?: (checked: boolean) => void\n   spanClassName?: string\n}\n\nexport const SuperCheckbox: React.FC<SuperCheckboxPropsType> = ({\n   type,\n   onChange,\n   onChangeChecked,\n   className,\n   spanClassName,\n   children,\n\n   ...restProps\n}) => {\n   const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n      onChange && onChange(e)\n\n      onChangeChecked && onChangeChecked(e.currentTarget.checked)\n   }\n\n   const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n   return (\n      <label className={finalInputClassName}>\n         <input type={'checkbox'} onChange={onChangeCallback} {...restProps} />\n         <span className={s.check} />\n         {children && <span className={s.spanClassName}>{children}</span>}\n      </label>\n   )\n}\n","import React from 'react'\nimport { SuperInputText } from '../../../../s1-main/m1-ui/u0-common/c1-SuperInputText/SuperInputText'\nimport { SuperButton } from '../../../../s1-main/m1-ui/u0-common/c2-SuperButton/SuperButton'\nimport { FormikProps } from 'formik'\nimport { SuperCheckbox } from '../../../../s1-main/m1-ui/u0-common/c3-SuperCheckbox/SuperCheckbox'\nimport { FormikValuesType } from './LoginContainer'\nimport { PATH } from '../../../../s1-main/m1-ui/u3-routes/Routes'\nimport { NavLink } from 'react-router-dom'\n\ntype LoginPropsType = {\n   formik: FormikProps<FormikValuesType>\n   error: string\n}\n\nexport const Login = ({ formik, error }: LoginPropsType) => {\n   return (\n      <>\n         <form onSubmit={formik.handleSubmit}>\n            <label htmlFor='email'>Email Address</label>\n            <SuperInputText id='email' type='email' {...formik.getFieldProps('email')} />\n            {formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\n            <label htmlFor='password'>Password</label>\n            <SuperInputText id='password' type='password' {...formik.getFieldProps('password')} />\n            {formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\n            {error && <div style={{ color: 'red' }}>{error}</div>}\n            <label htmlFor='rememberMe'>Remember Me</label>\n            <SuperCheckbox id='rememberMe' {...formik.getFieldProps('rememberMe')} />\n            <SuperButton\n               type='submit'\n               disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}\n               children={'Login'}\n            />\n         </form>\n         <NavLink to={PATH.REGISTRATION}>Registration</NavLink>\n         <span>/</span>\n         <NavLink to={PATH.PASSWORD_RECOVERY}>Password recovery</NavLink>\n      </>\n   )\n}\n","import axios from 'axios'\n\n// Ig heroku\nexport const baseURL = 'https://neko-back.herokuapp.com/2.0'\n\n// localhost\n// export const baseURL = 'http://localhost:7542/2.0/'\n\nexport const instance = axios.create({\n   baseURL,\n   withCredentials: true,\n})\n\nexport type ResType = {\n   _id: string\n   email: string\n   name: string\n   avatar?: string\n   publicCardPacksCount: number\n   created: Date\n   updated: Date\n   isAdmin: boolean\n   verified: boolean\n   rememberMe: boolean\n   error: string\n}\n","import { instance, ResType } from '../../../s1-main/m3-dal/instance'\nimport { FormikValuesType } from '../l1-ui/u1-login/LoginContainer'\n\nexport const loginAPI = {\n   login: async (data: FormikValuesType) => {\n      const response = await instance.post<ResType>('auth/login', data)\n      return response.data\n   },\n   logout: async () => {\n      return await instance.delete('auth/me')\n   },\n   me: async () => {\n      const response = await instance.post<ResType>('auth/me')\n      return response.data\n   },\n}\n","import { InferActionsType } from '../../../s1-main/m2-bll/actions'\nimport { Dispatch, Reducer } from 'redux'\nimport { AppThunk } from '../../../s1-main/m3-dal/thunks'\nimport { FormikValuesType } from '../l1-ui/u1-login/LoginContainer'\nimport { loginAPI } from '../l3-dal/loginAPI'\n\ntype InitialStateType = typeof initialState\n\ntype ActionTypes = InferActionsType<typeof actions>\n\nconst initialState = {\n   name: '',\n   email: '',\n   isLoggedIn: false,\n   error: '',\n}\n\nexport const loginReducer: Reducer<InitialStateType, ActionTypes> = (\n   state = initialState,\n   action,\n): InitialStateType => {\n   switch (action.type) {\n      case 'login/SET-USER':\n         return {\n            ...state,\n            name: action.name,\n            email: action.email,\n         }\n      case 'login/IS-LOGGED-IN':\n         return {\n            ...state,\n            isLoggedIn: action.isLoggedIn,\n         }\n      case 'login/SET_ERROR':\n         return {\n            ...state,\n            error: action.error,\n         }\n      default:\n         return state\n   }\n}\n\nexport const actions = {\n   setUserAC: (name: string, email: string) => ({ type: 'login/SET-USER' as const, email, name }),\n   isLoggedInAC: (isLoggedIn: boolean) => ({ type: 'login/IS-LOGGED-IN' as const, isLoggedIn }),\n   setErrorAC: (error: string) => ({ type: 'login/SET_ERROR' as const, error }),\n}\n\nconst errorHandler = (e: any, dispatch: Dispatch) => {\n   const error = e.response ? e.response.data.error : e.message + ', more details in the console'\n   dispatch(actions.setErrorAC(error))\n}\n\nexport const thunks = {\n   loginTC: (values: FormikValuesType): AppThunk => async (dispatch) => {\n      try {\n         const response = await loginAPI.login(values)\n         dispatch(actions.setUserAC(response.name, response.email))\n         dispatch(actions.isLoggedInAC(true))\n      } catch (e) {\n         errorHandler(e, dispatch)\n      }\n   },\n   logoutTC: (): AppThunk => async (dispatch) => {\n      try {\n         await loginAPI.logout()\n         dispatch(actions.isLoggedInAC(false))\n         dispatch(actions.setUserAC('', ''))\n      } catch (e) {\n         errorHandler(e, dispatch)\n      }\n   },\n   meTC: (): AppThunk => async (dispatch) => {\n      try {\n         const response = await loginAPI.me()\n         dispatch(actions.isLoggedInAC(true))\n         dispatch(actions.setUserAC(response.name, response.email))\n      } catch (e) {\n         dispatch(actions.isLoggedInAC(false))\n         errorHandler(e, dispatch)\n      }\n   },\n}\n","import React from 'react'\nimport { Login } from './Login'\nimport { FormikErrors, useFormik } from 'formik'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { thunks } from '../../l2-bll/loginReducer'\nimport { AppStateType } from '../../../../s1-main/m2-bll/store'\nimport { Redirect } from 'react-router-dom'\nimport { PATH } from '../../../../s1-main/m1-ui/u3-routes/Routes'\n\nexport type FormikValuesType = {\n   email: string\n   password: string\n   rememberMe: boolean\n}\n\nexport const LoginContainer = () => {\n   const isLoggedIn = useSelector<AppStateType, boolean>((state) => state.login.isLoggedIn)\n   const error = useSelector<AppStateType, string>((state) => state.login.error)\n   const dispatch = useDispatch()\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n         password: '',\n         rememberMe: false,\n      },\n      validate: (values) => {\n         const errors: FormikErrors<FormikValuesType> = {}\n         if (!values.email) {\n            errors.email = 'Email is required'\n         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = 'Invalid email address'\n         }\n         if (!values.password) {\n            errors.password = 'Password is required'\n         }\n         return errors\n      },\n      onSubmit: async (values: FormikValuesType) => {\n         await dispatch(thunks.loginTC(values))\n      },\n   })\n\n   if (isLoggedIn) {\n      return <Redirect to={PATH.PROFILE} />\n   }\n\n   return <Login formik={formik} error={error} />\n}\n","import React from 'react'\nimport { LoginContainer } from './u1-login/LoginContainer'\n\nexport const LoginPage = () => {\n   return (\n      <div>\n         <LoginContainer />\n      </div>\n   )\n}\n","import React from 'react'\n\nexport const Page404 = () => {\n   return <div>Page 404 not found</div>\n}\n","import { FormikProps } from 'formik'\nimport React, { FC } from 'react'\nimport { SuperInputText } from '../../../../s1-main/m1-ui/u0-common/c1-SuperInputText/SuperInputText'\nimport { SuperButton } from '../../../../s1-main/m1-ui/u0-common/c2-SuperButton/SuperButton'\nimport { FormValues } from './RegistrationContainer'\n\ntype PropsTypes = {\n   formik: FormikProps<FormValues>\n   serverErrors: string\n}\n\nexport const Registration: FC<PropsTypes> = ({ formik, serverErrors }) => {\n   return (\n      <div>\n         <form onSubmit={formik.handleSubmit}>\n            <label htmlFor='email'>Email Address</label>\n            <SuperInputText id='email' {...formik.getFieldProps('email')} />\n            {formik.errors.email && <div style={{ color: 'red' }}>{formik.errors.email}</div>}\n            <label htmlFor='password'>Password</label>\n            <SuperInputText id='password' {...formik.getFieldProps('password')} />\n            {formik.errors.password && <div style={{ color: 'red' }}>{formik.errors.password}</div>}\n            <label htmlFor='confirmPassword'>Confirm Password</label>\n            <SuperInputText id='confirmPassword' {...formik.getFieldProps('confirmPassword')} />\n            {formik.errors.confirmPassword && <div style={{ color: 'red' }}>{formik.errors.confirmPassword}</div>}\n            <SuperButton children={'submit'} disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting} />\n            {serverErrors && <div style={{ color: '#fff' }}>{serverErrors}</div>}\n         </form>\n      </div>\n   )\n}\n","import { instance, ResType } from '../../../s1-main/m3-dal/instance'\n\nexport const registrationAPI = {\n   setRegister: async (email: string, password: string) => {\n      const result = await instance.post<ResType>('auth/register', { email, password })\n      return result.data\n   },\n}\n","import { Reducer } from 'redux'\nimport { InferActionsType } from '../../../s1-main/m2-bll/actions'\nimport { AppThunk } from '../../../s1-main/m3-dal/thunks'\nimport { registrationAPI } from '../r3-dal/registrationAPI'\n\nexport type InitialStateType = typeof initialState\n\ntype ActionTypes = InferActionsType<typeof actions>\n\nconst initialState = {\n   isSuccessRegister: false,\n   error: '',\n}\n\nexport const registrationReducer: Reducer<InitialStateType, ActionTypes> = (\n   state = initialState,\n   action,\n): InitialStateType => {\n   switch (action.type) {\n      case 'IS_REGISTER':\n         return { ...state, isSuccessRegister: action.isSuccessRegister }\n      case 'SET_ERROR':\n         return { ...state, error: action.message }\n      default:\n         return state\n   }\n}\n\nexport const actions = {\n   toggleSuccessRegister: (isSuccessRegister: boolean) => ({ type: 'IS_REGISTER', isSuccessRegister } as const),\n   setError: (message: string) => ({ type: 'SET_ERROR', message } as const),\n}\n\nexport const thunks = {\n   accountCreation: (email: string, password: string): AppThunk => async (dispatch) => {\n      try {\n         await registrationAPI.setRegister(email, password)\n         dispatch(actions.toggleSuccessRegister(true))\n      } catch (e) {\n         dispatch(actions.setError(e.response.data.error))\n      }\n   },\n}\n","import React, { useEffect } from 'react'\nimport { Registration } from './Registration'\nimport { FormikErrors, useFormik } from 'formik'\nimport { actions, thunks } from '../../r2-bll/registrationReducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppStateType } from '../../../../s1-main/m2-bll/store'\nimport { Redirect } from 'react-router-dom'\n\nexport type FormValues = {\n   email: string\n   password: string\n   confirmPassword: string\n}\n\nexport const RegistrationContainer = () => {\n   const isSuccessRegister = useSelector<AppStateType, boolean>((state) => state.registration.isSuccessRegister)\n   const serverErrors = useSelector<AppStateType, string>((state) => state.registration.error)\n   const dispatch = useDispatch()\n   useEffect(() => {\n      if (isSuccessRegister) {\n         return () => {\n            dispatch(actions.toggleSuccessRegister(false))\n            dispatch(actions.setError(''))\n         }\n      }\n   }, [isSuccessRegister, dispatch])\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n         password: '',\n         confirmPassword: '',\n      },\n      validate: (values: FormValues) => {\n         const errors: FormikErrors<FormValues> = {}\n         if (!values.email) {\n            errors.email = 'Email is required'\n         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = 'Invalid email address'\n         }\n         if (!values.password) {\n            errors.password = 'Password is required'\n         } else if (values.password.length <= 7) {\n            errors.password = 'Password must be more than 7 characters'\n         }\n         if (!values.confirmPassword) {\n            errors.confirmPassword = 'Confirm password is required'\n         } else if (values.confirmPassword !== values.password) {\n            errors.confirmPassword = 'Passwords do not match'\n         }\n         return errors\n      },\n      onSubmit: async (values: FormValues) => {\n         const { password, email } = values\n         await dispatch(thunks.accountCreation(email, password))\n      },\n   })\n\n   if (isSuccessRegister) {\n      return <Redirect to={'/login'} />\n   }\n\n   return (\n      <div>\n         <Registration serverErrors={serverErrors} formik={formik} />\n      </div>\n   )\n}\n","import React from 'react'\nimport { RegistrationContainer } from './u1-registration/RegistrationContainer'\n\nexport const RegistrationPage = () => {\n   return (\n      <div>\n         <RegistrationContainer />\n      </div>\n   )\n}\n","import React from 'react'\nimport { SuperInputText } from './c1-SuperInputText/SuperInputText'\nimport { SuperButton } from './c2-SuperButton/SuperButton'\nimport { SuperCheckbox } from './c3-SuperCheckbox/SuperCheckbox'\n\nexport const ComponentsTestRack = () => {\n   return (\n      <div>\n         <SuperInputText placeholder={'First Name'} />\n         <SuperInputText placeholder={'Last Name'} />\n         <SuperInputText placeholder={'Email'} />\n         <SuperInputText placeholder={'Password'} />\n         <SuperButton children={'Log in'} />\n         <SuperCheckbox children={'Remember Me'} />\n      </div>\n   )\n}\n","import React from 'react'\nimport { SuperButton } from '../../../../s1-main/m1-ui/u0-common/c2-SuperButton/SuperButton'\n\ntype PropsType = {\n   name: string\n   email: string\n   error: string\n   logout: () => void\n}\n\nexport const Profile = ({ name, email, logout, error }: PropsType) => {\n   return (\n      <div>\n         <h2>Profile</h2>\n         {error && <div style={{ color: 'red' }}>{error}</div>}\n         <span>Name: {name}</span>\n         <span>Email: {email}</span>\n         <SuperButton onClick={logout}>Log out</SuperButton>\n      </div>\n   )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { AppStateType } from '../../../../s1-main/m2-bll/store'\nimport { Profile } from './Profile'\nimport { PATH } from '../../../../s1-main/m1-ui/u3-routes/Routes'\nimport { thunks } from '../../../f1-login/l2-bll/loginReducer'\n\nexport const ProfileContainer = () => {\n   const name = useSelector<AppStateType, string>((state) => state.login.name)\n   const email = useSelector<AppStateType, string>((state) => state.login.email)\n   const isLoggedIn = useSelector<AppStateType, boolean>((state) => state.login.isLoggedIn)\n   const error = useSelector<AppStateType, string>((state) => state.registration.error)\n\n   const dispatch = useDispatch()\n\n   useEffect(() => {\n      if (!name) dispatch(thunks.meTC())\n   }, [dispatch, name])\n\n   const logout = () => {\n      dispatch(thunks.logoutTC())\n   }\n\n   if (!isLoggedIn) {\n      return <Redirect to={PATH.LOGIN} />\n   }\n\n   return <Profile name={name} email={email} logout={logout} error={error} />\n}\n","import React from 'react'\nimport { ProfileContainer } from './u1-profile/ProfileContainer'\n\nexport const ProfilePage = () => {\n   return (\n      <div>\n         <ProfileContainer />\n      </div>\n   )\n}\n","import { instance } from '../../../s1-main/m3-dal/instance'\n\nconst messageView = (token: string) => {\n   return `<div style=\"background-color: #00ff00; padding: 15px\"><a href=http://localhost:3000/#/set-new-password/${token}'>Ссылка на восстановление пароля</a></div>`\n}\nconst messageMelivaro = (token: string) => {\n   return `<div style=\"background-color: #00ff00; padding: 15px\"><a href=https://melivaro.github.io/#/set-new-password/${token}'>Ссылка на восстановление пароля</a></div>`\n}\n\nexport const passRecoveryAPI = {\n   recovery: (email: string) => {\n      return instance.post('/auth/forgot', {\n         email,\n         from: 'mymailtolaaa@gmail.com',\n         message: messageMelivaro('$token$'),\n      })\n   },\n}\n","import { instance } from '../../../s1-main/m3-dal/instance'\n\nexport const updatePassAPI = {\n   updatePass: (email: string, resetToken: string) => {\n      return instance.post('/auth/set-new-password', { email, resetToken })\n   },\n}\n","import { InferActionsType } from '../../../s1-main/m2-bll/actions'\nimport { Reducer } from 'redux'\nimport { AppThunk } from '../../../s1-main/m3-dal/thunks'\nimport { passRecoveryAPI } from '../pr3-dal/passwordRecoveryAPI'\nimport { actionsUpdate } from '../../f5-newPasswordEntry/npe2-bll/updatePasswordReducer'\n\nexport type InitialStateRecoveryType = typeof initialState\n\nenum CONS {\n   CHANGE_PASS = 'CHANGE_PASS',\n   SEND_EMAIL = 'SEND_EMAIL',\n}\n\ntype ActionTypes = InferActionsType<typeof actions>\n\nconst initialState = {\n   inputText: '',\n   result: 'Укажите вашу электронную почту для востановления пароля',\n}\n\nexport const passwordRecoveryReducer: Reducer<InitialStateRecoveryType, ActionTypes> = (\n   state = initialState,\n   action,\n): InitialStateRecoveryType => {\n   switch (action.type) {\n      case CONS.CHANGE_PASS:\n         return { ...state, inputText: action.text }\n      case CONS.SEND_EMAIL:\n         return { ...state, result: action.result, inputText: '' }\n      default:\n         return state\n   }\n}\n\nexport const actions = {\n   recoverPassAC: (text: string) =>\n      ({\n         type: CONS.CHANGE_PASS,\n         text,\n      } as const),\n   sendEmailAC: (result: string) =>\n      ({\n         type: CONS.SEND_EMAIL,\n         result,\n      } as const),\n}\n\nexport const recoverThunks = {\n   sendEmailTC: (email: string): AppThunk => async (dispatch) => {\n      try {\n         const res = await passRecoveryAPI.recovery(email)\n         dispatch(actions.sendEmailAC(res.data.info))\n         dispatch(actionsUpdate.passUpdatedAC(true))\n      } catch (e) {\n         dispatch(actions.sendEmailAC(e.response.data.error))\n      }\n   },\n}\n","import React, { ChangeEvent } from 'react'\nimport { SuperInputText } from '../../../../s1-main/m1-ui/u0-common/c1-SuperInputText/SuperInputText'\nimport { SuperButton } from '../../../../s1-main/m1-ui/u0-common/c2-SuperButton/SuperButton'\n\ntype PasswordRecoveryPageType = {\n   result: string\n   inputText: string\n   inputHandler: (e: ChangeEvent<HTMLInputElement>) => void\n   buttonClickHandler: () => void\n}\nexport const PasswordRecovery: React.FC<PasswordRecoveryPageType> = ({\n   result,\n   inputText,\n   inputHandler,\n   buttonClickHandler,\n}) => {\n   return (\n      <div>\n         <span>Восстановление пароля</span>\n         <p>{result}</p>\n         <div>\n            <SuperInputText value={inputText} onChange={inputHandler} />\n            <SuperButton onClick={buttonClickHandler}>Отправить</SuperButton>\n         </div>\n      </div>\n   )\n}\n","import React, { ChangeEvent } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppStateType } from '../../../../s1-main/m2-bll/store'\nimport { actions, recoverThunks } from '../../pr2-bll/passwordRecoveryReducer'\nimport { PasswordRecovery } from './PasswordRecovery'\n\nexport const PasswordRecoveryContainer = () => {\n   const recoveryResult = useSelector<AppStateType, string>((state) => state.passRecovery.result)\n   const inputText = useSelector<AppStateType, string>((state) => state.passRecovery.inputText)\n\n   const dispatch = useDispatch()\n\n   const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      dispatch(actions.recoverPassAC(e.currentTarget.value))\n   }\n   const buttonClickHandler = () => {\n      dispatch(recoverThunks.sendEmailTC(inputText))\n   }\n   return (\n      <PasswordRecovery\n         inputText={inputText}\n         result={recoveryResult}\n         inputHandler={inputChangeHandler}\n         buttonClickHandler={buttonClickHandler}\n      />\n   )\n}\n","import React from 'react'\nimport { PasswordRecoveryContainer } from './u1-passwordRecovery/PasswordRecoveryContainer'\n\nconst PasswordRecoveryPage = () => {\n   return <PasswordRecoveryContainer />\n}\n\nexport default PasswordRecoveryPage\n","import React from 'react'\nimport { SuperInputText } from '../../../../s1-main/m1-ui/u0-common/c1-SuperInputText/SuperInputText'\nimport { SuperButton } from '../../../../s1-main/m1-ui/u0-common/c2-SuperButton/SuperButton'\nimport { Redirect } from 'react-router-dom'\nimport { PATH } from '../../../../s1-main/m1-ui/u3-routes/Routes'\nimport { FormikProps } from 'formik'\nimport { FormValues } from './NewPasswordEntryContainer'\n\ntype NewPasswordEntryType = {\n   resultData: string\n   isUpdate: boolean\n   formik: FormikProps<FormValues>\n}\n\nexport const NewPasswordEntry: React.FC<NewPasswordEntryType> = ({ resultData, isUpdate, formik }) => {\n   if (isUpdate) {\n      return <Redirect to={PATH.LOGIN} />\n   }\n\n   return (\n      <div>\n         <form onSubmit={formik.handleSubmit}>\n            <span>{resultData}</span>\n            <SuperInputText placeholder={'Укажите новый пароль'} {...formik.getFieldProps('password')} />\n            {formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\n            <SuperInputText placeholder={'Повторите ввод пароля'} {...formik.getFieldProps('confirmPassword')} />\n            {formik.errors.confirmPassword ? <div style={{ color: 'red' }}>{formik.errors.confirmPassword}</div> : null}\n            <SuperButton children={'Изменить пароль'} type={'submit'} />\n         </form>\n      </div>\n   )\n}\n","import React from 'react'\nimport { NewPasswordEntry } from './NewPasswordEntry'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppStateType } from '../../../../s1-main/m2-bll/store'\nimport { useParams } from 'react-router-dom'\nimport { actionsUpdate, updatePasswordTC } from '../../npe2-bll/updatePasswordReducer'\nimport { useFormik } from 'formik'\n\nexport type FormValues = {\n   password: string\n   confirmPassword: string\n}\n\nexport type FormErrorValues = {\n   password?: string\n   confirmPassword?: string\n}\n\nexport const NewPasswordEntryContainer = () => {\n   const dispatch = useDispatch()\n   const result = useSelector<AppStateType, string>((state) => state.updatePass.result)\n   const isUpdate = useSelector<AppStateType, boolean>((state) => state.updatePass.passIsUpdated)\n   const { token } = useParams<{ token: string }>()\n\n   const formik = useFormik({\n      initialValues: {\n         password: '',\n         confirmPassword: '',\n      },\n      validate: (values) => {\n         const { password, confirmPassword } = values\n         const errors: FormErrorValues = {}\n         if (!password) {\n            errors.password = 'Password is required'\n         }\n         if (!confirmPassword) {\n            errors.password = 'Password is required'\n         }\n         if (password.length < 3) {\n            errors.password = 'Пароль не может быть меньше 3х символов'\n         }\n         if (confirmPassword.length < 3) {\n            errors.confirmPassword = 'Пароль не может быть меньше 3х символов'\n         }\n         return errors\n      },\n      onSubmit: (values) => {\n         const { password, confirmPassword } = values\n\n         if (password === confirmPassword) {\n            dispatch(updatePasswordTC.updatePass(password, token))\n         } else {\n            dispatch(actionsUpdate.passUpdateResultAC('Пороли не совпадают!'))\n         }\n      },\n   })\n\n   return <NewPasswordEntry resultData={result} isUpdate={isUpdate} formik={formik} />\n}\n","import React from 'react'\nimport { NewPasswordEntryContainer } from './u1-passwordEntry/NewPasswordEntryContainer'\n\nconst NewPasswordEntryPage = () => {\n   return <NewPasswordEntryContainer />\n}\n\nexport default NewPasswordEntryPage\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { LoginPage } from '../../../s2-features/f1-login/l1-ui/LoginPage'\nimport { Page404 } from './Page404'\nimport { RegistrationPage } from '../../../s2-features/f2-registration/r1-ui/RegistrationPage'\nimport { ComponentsTestRack } from '../u0-common/ComponentsTestRack'\nimport { ProfilePage } from '../../../s2-features/f3-profile/p1-ui/ProfilePage'\nimport PasswordRecoveryPage from '../../../s2-features/f4-passwordRecovery/pr1-ui/PasswordRecoveryPage'\nimport NewPasswordEntryPage from '../../../s2-features/f5-newPasswordEntry/npe1-ui/NewPasswordEntryPage'\n\nexport const PATH = {\n   LOGIN: '/login',\n   REGISTRATION: '/registration',\n   PROFILE: '/profile',\n   PASSWORD_RECOVERY: '/password-recovery',\n   NEW_PASSWORD_ENTRY: '/set-new-password/:token',\n   COMPONENT_TEST_RACK: '/component-test-rack',\n}\n\nexport const Routes = () => {\n   return (\n      <Switch>\n         <Route path={PATH.LOGIN} exact render={() => <LoginPage />} />\n         <Route path={PATH.REGISTRATION} exact render={() => <RegistrationPage />} />\n         <Route path={PATH.PROFILE} exact render={() => <ProfilePage />} />\n         <Route path={PATH.PASSWORD_RECOVERY} exact render={() => <PasswordRecoveryPage />} />\n         <Route path={PATH.NEW_PASSWORD_ENTRY} render={() => <NewPasswordEntryPage />} />\n         <Route path={PATH.COMPONENT_TEST_RACK} exact render={() => <ComponentsTestRack />} />\n\n         <Route path={'/*'} render={() => <Page404 />} />\n      </Switch>\n   )\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { PATH } from '../u3-routes/Routes'\n\nexport const Header = () => {\n   return (\n      <div>\n         Header\n         <NavLink to={PATH.LOGIN}>Login_/</NavLink>\n         <NavLink to={PATH.REGISTRATION}>Registration_/</NavLink>\n         <NavLink to={PATH.PROFILE}>Profile_/</NavLink>\n         <NavLink to={PATH.PASSWORD_RECOVERY}>Password recovery_/</NavLink>\n         <NavLink to={PATH.NEW_PASSWORD_ENTRY}>New password entry_/</NavLink>\n         <NavLink to={PATH.COMPONENT_TEST_RACK}>Component test rack_/</NavLink>\n      </div>\n   )\n}\n","import React from 'react'\nimport { Header } from '../u4-header/Header'\nimport { Routes } from '../u3-routes/Routes'\nimport s from './Main.module.scss'\n\nexport const Main = () => {\n   return (\n      <div className={s.mainContainer}>\n         Main\n         <Header />\n         <Routes />\n      </div>\n   )\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { loginReducer } from '../../s2-features/f1-login/l2-bll/loginReducer'\nimport { profileReducer } from '../../s2-features/f3-profile/p2-bll/profileReducer'\nimport { passwordRecoveryReducer } from '../../s2-features/f4-passwordRecovery/pr2-bll/passwordRecoveryReducer'\nimport { registrationReducer } from '../../s2-features/f2-registration/r2-bll/registrationReducer'\nimport { updatePasswordReducer } from '../../s2-features/f5-newPasswordEntry/npe2-bll/updatePasswordReducer'\n\nconst reducers = combineReducers({\n   login: loginReducer,\n   profile: profileReducer,\n   registration: registrationReducer,\n   passRecovery: passwordRecoveryReducer,\n   updatePass: updatePasswordReducer,\n})\n\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))\n\nexport type AppStateType = ReturnType<typeof reducers>\n\n// @ts-ignore\nwindow.store = store\n","import { InferActionsType } from '../../../s1-main/m2-bll/actions'\nimport { Reducer } from 'redux'\nimport { AppThunk } from '../../../s1-main/m3-dal/thunks'\n\ntype InitialStateType = typeof initialState\n\ntype ActionTypes = InferActionsType<typeof actions>\n\nconst initialState = {}\n\nexport const profileReducer: Reducer<InitialStateType, ActionTypes> = (state, action): InitialStateType => {\n   switch (action.type) {\n      case 'SOME':\n         return { ...state }\n      default:\n         return { ...state }\n   }\n}\n\nconst actions = {\n   someAC: () => ({ type: 'SOME' }),\n}\n\nconst thunks = {\n   someTC: (): AppThunk => (dispatch) => {},\n}\n","import React from 'react'\nimport { Main } from '../u2-main/Main'\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { store } from '../../m2-bll/store'\n\nexport const App = () => {\n   return (\n      <Provider store={store}>\n         <HashRouter>\n            <div>\n               <Main />\n            </div>\n         </HashRouter>\n      </Provider>\n   )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n   if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n         getCLS(onPerfEntry)\n         getFID(onPerfEntry)\n         getFCP(onPerfEntry)\n         getLCP(onPerfEntry)\n         getTTFB(onPerfEntry)\n      })\n   }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport { App } from './s1-main/m1-ui/u1-app/App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { store } from './s1-main/m2-bll/store'\n\nReactDOM.render(\n   <Provider store={store}>\n      <App />\n   </Provider>,\n   document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}